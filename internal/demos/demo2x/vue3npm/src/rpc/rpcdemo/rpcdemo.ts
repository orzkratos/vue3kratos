// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "rpcdemo/rpcdemo.proto" (package "api.rpcdemo", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message api.rpcdemo.CreateRpcDemoRequest
 */
export interface CreateRpcDemoRequest {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string type = 3
     */
    type: string;
}
/**
 * @generated from protobuf message api.rpcdemo.CreateRpcDemoReply
 */
export interface CreateRpcDemoReply {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
}
/**
 * @generated from protobuf message api.rpcdemo.DeleteRpcDemoRequest
 */
export interface DeleteRpcDemoRequest {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
}
/**
 * @generated from protobuf message api.rpcdemo.DeleteRpcDemoReply
 */
export interface DeleteRpcDemoReply {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
}
/**
 * @generated from protobuf message api.rpcdemo.UpdateRpcDemoRequest
 */
export interface UpdateRpcDemoRequest {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
}
/**
 * @generated from protobuf message api.rpcdemo.UpdateRpcDemoReply
 */
export interface UpdateRpcDemoReply {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
}
/**
 * @generated from protobuf message api.rpcdemo.SelectRpcDemoRequest
 */
export interface SelectRpcDemoRequest {
    /**
     * @generated from protobuf field: string type = 1
     */
    type: string;
}
/**
 * @generated from protobuf message api.rpcdemo.SelectRpcDemoReply
 */
export interface SelectRpcDemoReply {
    /**
     * @generated from protobuf field: repeated api.rpcdemo.SelectRpcDemoReply.Item demos = 1
     */
    demos: SelectRpcDemoReply_Item[];
}
/**
 * @generated from protobuf message api.rpcdemo.SelectRpcDemoReply.Item
 */
export interface SelectRpcDemoReply_Item {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string type = 3
     */
    type: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateRpcDemoRequest$Type extends MessageType<CreateRpcDemoRequest> {
    constructor() {
        super("api.rpcdemo.CreateRpcDemoRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRpcDemoRequest>): CreateRpcDemoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.name = "";
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial<CreateRpcDemoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRpcDemoRequest): CreateRpcDemoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRpcDemoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.rpcdemo.CreateRpcDemoRequest
 */
export const CreateRpcDemoRequest = new CreateRpcDemoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRpcDemoReply$Type extends MessageType<CreateRpcDemoReply> {
    constructor() {
        super("api.rpcdemo.CreateRpcDemoReply", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRpcDemoReply>): CreateRpcDemoReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<CreateRpcDemoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRpcDemoReply): CreateRpcDemoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRpcDemoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.rpcdemo.CreateRpcDemoReply
 */
export const CreateRpcDemoReply = new CreateRpcDemoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRpcDemoRequest$Type extends MessageType<DeleteRpcDemoRequest> {
    constructor() {
        super("api.rpcdemo.DeleteRpcDemoRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRpcDemoRequest>): DeleteRpcDemoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteRpcDemoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRpcDemoRequest): DeleteRpcDemoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRpcDemoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.rpcdemo.DeleteRpcDemoRequest
 */
export const DeleteRpcDemoRequest = new DeleteRpcDemoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRpcDemoReply$Type extends MessageType<DeleteRpcDemoReply> {
    constructor() {
        super("api.rpcdemo.DeleteRpcDemoReply", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRpcDemoReply>): DeleteRpcDemoReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteRpcDemoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRpcDemoReply): DeleteRpcDemoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRpcDemoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.rpcdemo.DeleteRpcDemoReply
 */
export const DeleteRpcDemoReply = new DeleteRpcDemoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRpcDemoRequest$Type extends MessageType<UpdateRpcDemoRequest> {
    constructor() {
        super("api.rpcdemo.UpdateRpcDemoRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateRpcDemoRequest>): UpdateRpcDemoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateRpcDemoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRpcDemoRequest): UpdateRpcDemoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRpcDemoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.rpcdemo.UpdateRpcDemoRequest
 */
export const UpdateRpcDemoRequest = new UpdateRpcDemoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRpcDemoReply$Type extends MessageType<UpdateRpcDemoReply> {
    constructor() {
        super("api.rpcdemo.UpdateRpcDemoReply", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateRpcDemoReply>): UpdateRpcDemoReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateRpcDemoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRpcDemoReply): UpdateRpcDemoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRpcDemoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.rpcdemo.UpdateRpcDemoReply
 */
export const UpdateRpcDemoReply = new UpdateRpcDemoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectRpcDemoRequest$Type extends MessageType<SelectRpcDemoRequest> {
    constructor() {
        super("api.rpcdemo.SelectRpcDemoRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SelectRpcDemoRequest>): SelectRpcDemoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial<SelectRpcDemoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectRpcDemoRequest): SelectRpcDemoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectRpcDemoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.rpcdemo.SelectRpcDemoRequest
 */
export const SelectRpcDemoRequest = new SelectRpcDemoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectRpcDemoReply$Type extends MessageType<SelectRpcDemoReply> {
    constructor() {
        super("api.rpcdemo.SelectRpcDemoReply", [
            { no: 1, name: "demos", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SelectRpcDemoReply_Item }
        ]);
    }
    create(value?: PartialMessage<SelectRpcDemoReply>): SelectRpcDemoReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.demos = [];
        if (value !== undefined)
            reflectionMergePartial<SelectRpcDemoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectRpcDemoReply): SelectRpcDemoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated api.rpcdemo.SelectRpcDemoReply.Item demos */ 1:
                    message.demos.push(SelectRpcDemoReply_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectRpcDemoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated api.rpcdemo.SelectRpcDemoReply.Item demos = 1; */
        for (let i = 0; i < message.demos.length; i++)
            SelectRpcDemoReply_Item.internalBinaryWrite(message.demos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.rpcdemo.SelectRpcDemoReply
 */
export const SelectRpcDemoReply = new SelectRpcDemoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectRpcDemoReply_Item$Type extends MessageType<SelectRpcDemoReply_Item> {
    constructor() {
        super("api.rpcdemo.SelectRpcDemoReply.Item", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SelectRpcDemoReply_Item>): SelectRpcDemoReply_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.name = "";
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial<SelectRpcDemoReply_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectRpcDemoReply_Item): SelectRpcDemoReply_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectRpcDemoReply_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.rpcdemo.SelectRpcDemoReply.Item
 */
export const SelectRpcDemoReply_Item = new SelectRpcDemoReply_Item$Type();
/**
 * @generated ServiceType for protobuf service api.rpcdemo.Rpcdemo
 */
export const Rpcdemo = new ServiceType("api.rpcdemo.Rpcdemo", [
    { name: "CreateRpcDemo", options: { "google.api.http": { post: "/api/demo/create-rpc-demo", body: "*" } }, I: CreateRpcDemoRequest, O: CreateRpcDemoReply },
    { name: "DeleteRpcDemo", options: { "google.api.http": { delete: "/api/demo/create-rpc-demo/{code}" } }, I: DeleteRpcDemoRequest, O: DeleteRpcDemoReply },
    { name: "UpdateRpcDemo", options: { "google.api.http": { put: "/api/demo/update-rpc-demo", body: "*" } }, I: UpdateRpcDemoRequest, O: UpdateRpcDemoReply },
    { name: "SelectRpcDemo", options: { "google.api.http": { get: "/api/demo/select-rpc-demo" } }, I: SelectRpcDemoRequest, O: SelectRpcDemoReply }
]);
