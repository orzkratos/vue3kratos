// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: rpcdemo/rpcdemo.proto

package rpcdemo

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRpcdemoCreateRpcDemo = "/api.rpcdemo.Rpcdemo/CreateRpcDemo"
const OperationRpcdemoDeleteRpcDemo = "/api.rpcdemo.Rpcdemo/DeleteRpcDemo"
const OperationRpcdemoSelectRpcDemo = "/api.rpcdemo.Rpcdemo/SelectRpcDemo"
const OperationRpcdemoUpdateRpcDemo = "/api.rpcdemo.Rpcdemo/UpdateRpcDemo"

type RpcdemoHTTPServer interface {
	CreateRpcDemo(context.Context, *CreateRpcDemoRequest) (*CreateRpcDemoReply, error)
	DeleteRpcDemo(context.Context, *DeleteRpcDemoRequest) (*DeleteRpcDemoReply, error)
	SelectRpcDemo(context.Context, *SelectRpcDemoRequest) (*SelectRpcDemoReply, error)
	UpdateRpcDemo(context.Context, *UpdateRpcDemoRequest) (*UpdateRpcDemoReply, error)
}

func RegisterRpcdemoHTTPServer(s *http.Server, srv RpcdemoHTTPServer) {
	r := s.Route("/")
	r.POST("/api/demo/create-rpc-demo", _Rpcdemo_CreateRpcDemo0_HTTP_Handler(srv))
	r.DELETE("/api/demo/create-rpc-demo/{code}", _Rpcdemo_DeleteRpcDemo0_HTTP_Handler(srv))
	r.PUT("/api/demo/update-rpc-demo", _Rpcdemo_UpdateRpcDemo0_HTTP_Handler(srv))
	r.GET("/api/demo/select-rpc-demo", _Rpcdemo_SelectRpcDemo0_HTTP_Handler(srv))
}

func _Rpcdemo_CreateRpcDemo0_HTTP_Handler(srv RpcdemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRpcDemoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRpcdemoCreateRpcDemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRpcDemo(ctx, req.(*CreateRpcDemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRpcDemoReply)
		return ctx.Result(200, reply)
	}
}

func _Rpcdemo_DeleteRpcDemo0_HTTP_Handler(srv RpcdemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRpcDemoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRpcdemoDeleteRpcDemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRpcDemo(ctx, req.(*DeleteRpcDemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRpcDemoReply)
		return ctx.Result(200, reply)
	}
}

func _Rpcdemo_UpdateRpcDemo0_HTTP_Handler(srv RpcdemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRpcDemoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRpcdemoUpdateRpcDemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRpcDemo(ctx, req.(*UpdateRpcDemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRpcDemoReply)
		return ctx.Result(200, reply)
	}
}

func _Rpcdemo_SelectRpcDemo0_HTTP_Handler(srv RpcdemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelectRpcDemoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRpcdemoSelectRpcDemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelectRpcDemo(ctx, req.(*SelectRpcDemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelectRpcDemoReply)
		return ctx.Result(200, reply)
	}
}

type RpcdemoHTTPClient interface {
	CreateRpcDemo(ctx context.Context, req *CreateRpcDemoRequest, opts ...http.CallOption) (rsp *CreateRpcDemoReply, err error)
	DeleteRpcDemo(ctx context.Context, req *DeleteRpcDemoRequest, opts ...http.CallOption) (rsp *DeleteRpcDemoReply, err error)
	SelectRpcDemo(ctx context.Context, req *SelectRpcDemoRequest, opts ...http.CallOption) (rsp *SelectRpcDemoReply, err error)
	UpdateRpcDemo(ctx context.Context, req *UpdateRpcDemoRequest, opts ...http.CallOption) (rsp *UpdateRpcDemoReply, err error)
}

type RpcdemoHTTPClientImpl struct {
	cc *http.Client
}

func NewRpcdemoHTTPClient(client *http.Client) RpcdemoHTTPClient {
	return &RpcdemoHTTPClientImpl{client}
}

func (c *RpcdemoHTTPClientImpl) CreateRpcDemo(ctx context.Context, in *CreateRpcDemoRequest, opts ...http.CallOption) (*CreateRpcDemoReply, error) {
	var out CreateRpcDemoReply
	pattern := "/api/demo/create-rpc-demo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRpcdemoCreateRpcDemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RpcdemoHTTPClientImpl) DeleteRpcDemo(ctx context.Context, in *DeleteRpcDemoRequest, opts ...http.CallOption) (*DeleteRpcDemoReply, error) {
	var out DeleteRpcDemoReply
	pattern := "/api/demo/create-rpc-demo/{code}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRpcdemoDeleteRpcDemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RpcdemoHTTPClientImpl) SelectRpcDemo(ctx context.Context, in *SelectRpcDemoRequest, opts ...http.CallOption) (*SelectRpcDemoReply, error) {
	var out SelectRpcDemoReply
	pattern := "/api/demo/select-rpc-demo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRpcdemoSelectRpcDemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RpcdemoHTTPClientImpl) UpdateRpcDemo(ctx context.Context, in *UpdateRpcDemoRequest, opts ...http.CallOption) (*UpdateRpcDemoReply, error) {
	var out UpdateRpcDemoReply
	pattern := "/api/demo/update-rpc-demo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRpcdemoUpdateRpcDemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
