// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: rpcdemo/rpcdemo.proto

package rpcdemo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rpcdemo_CreateRpcDemo_FullMethodName = "/api.rpcdemo.Rpcdemo/CreateRpcDemo"
	Rpcdemo_DeleteRpcDemo_FullMethodName = "/api.rpcdemo.Rpcdemo/DeleteRpcDemo"
	Rpcdemo_UpdateRpcDemo_FullMethodName = "/api.rpcdemo.Rpcdemo/UpdateRpcDemo"
	Rpcdemo_SelectRpcDemo_FullMethodName = "/api.rpcdemo.Rpcdemo/SelectRpcDemo"
)

// RpcdemoClient is the client API for Rpcdemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcdemoClient interface {
	CreateRpcDemo(ctx context.Context, in *CreateRpcDemoRequest, opts ...grpc.CallOption) (*CreateRpcDemoReply, error)
	DeleteRpcDemo(ctx context.Context, in *DeleteRpcDemoRequest, opts ...grpc.CallOption) (*DeleteRpcDemoReply, error)
	UpdateRpcDemo(ctx context.Context, in *UpdateRpcDemoRequest, opts ...grpc.CallOption) (*UpdateRpcDemoReply, error)
	SelectRpcDemo(ctx context.Context, in *SelectRpcDemoRequest, opts ...grpc.CallOption) (*SelectRpcDemoReply, error)
}

type rpcdemoClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcdemoClient(cc grpc.ClientConnInterface) RpcdemoClient {
	return &rpcdemoClient{cc}
}

func (c *rpcdemoClient) CreateRpcDemo(ctx context.Context, in *CreateRpcDemoRequest, opts ...grpc.CallOption) (*CreateRpcDemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRpcDemoReply)
	err := c.cc.Invoke(ctx, Rpcdemo_CreateRpcDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcdemoClient) DeleteRpcDemo(ctx context.Context, in *DeleteRpcDemoRequest, opts ...grpc.CallOption) (*DeleteRpcDemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRpcDemoReply)
	err := c.cc.Invoke(ctx, Rpcdemo_DeleteRpcDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcdemoClient) UpdateRpcDemo(ctx context.Context, in *UpdateRpcDemoRequest, opts ...grpc.CallOption) (*UpdateRpcDemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRpcDemoReply)
	err := c.cc.Invoke(ctx, Rpcdemo_UpdateRpcDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcdemoClient) SelectRpcDemo(ctx context.Context, in *SelectRpcDemoRequest, opts ...grpc.CallOption) (*SelectRpcDemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectRpcDemoReply)
	err := c.cc.Invoke(ctx, Rpcdemo_SelectRpcDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcdemoServer is the server API for Rpcdemo service.
// All implementations must embed UnimplementedRpcdemoServer
// for forward compatibility.
type RpcdemoServer interface {
	CreateRpcDemo(context.Context, *CreateRpcDemoRequest) (*CreateRpcDemoReply, error)
	DeleteRpcDemo(context.Context, *DeleteRpcDemoRequest) (*DeleteRpcDemoReply, error)
	UpdateRpcDemo(context.Context, *UpdateRpcDemoRequest) (*UpdateRpcDemoReply, error)
	SelectRpcDemo(context.Context, *SelectRpcDemoRequest) (*SelectRpcDemoReply, error)
	mustEmbedUnimplementedRpcdemoServer()
}

// UnimplementedRpcdemoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRpcdemoServer struct{}

func (UnimplementedRpcdemoServer) CreateRpcDemo(context.Context, *CreateRpcDemoRequest) (*CreateRpcDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRpcDemo not implemented")
}
func (UnimplementedRpcdemoServer) DeleteRpcDemo(context.Context, *DeleteRpcDemoRequest) (*DeleteRpcDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRpcDemo not implemented")
}
func (UnimplementedRpcdemoServer) UpdateRpcDemo(context.Context, *UpdateRpcDemoRequest) (*UpdateRpcDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRpcDemo not implemented")
}
func (UnimplementedRpcdemoServer) SelectRpcDemo(context.Context, *SelectRpcDemoRequest) (*SelectRpcDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRpcDemo not implemented")
}
func (UnimplementedRpcdemoServer) mustEmbedUnimplementedRpcdemoServer() {}
func (UnimplementedRpcdemoServer) testEmbeddedByValue()                 {}

// UnsafeRpcdemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcdemoServer will
// result in compilation errors.
type UnsafeRpcdemoServer interface {
	mustEmbedUnimplementedRpcdemoServer()
}

func RegisterRpcdemoServer(s grpc.ServiceRegistrar, srv RpcdemoServer) {
	// If the following call pancis, it indicates UnimplementedRpcdemoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rpcdemo_ServiceDesc, srv)
}

func _Rpcdemo_CreateRpcDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRpcDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcdemoServer).CreateRpcDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpcdemo_CreateRpcDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcdemoServer).CreateRpcDemo(ctx, req.(*CreateRpcDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpcdemo_DeleteRpcDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRpcDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcdemoServer).DeleteRpcDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpcdemo_DeleteRpcDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcdemoServer).DeleteRpcDemo(ctx, req.(*DeleteRpcDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpcdemo_UpdateRpcDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRpcDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcdemoServer).UpdateRpcDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpcdemo_UpdateRpcDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcdemoServer).UpdateRpcDemo(ctx, req.(*UpdateRpcDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpcdemo_SelectRpcDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRpcDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcdemoServer).SelectRpcDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpcdemo_SelectRpcDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcdemoServer).SelectRpcDemo(ctx, req.(*SelectRpcDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rpcdemo_ServiceDesc is the grpc.ServiceDesc for Rpcdemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpcdemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpcdemo.Rpcdemo",
	HandlerType: (*RpcdemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRpcDemo",
			Handler:    _Rpcdemo_CreateRpcDemo_Handler,
		},
		{
			MethodName: "DeleteRpcDemo",
			Handler:    _Rpcdemo_DeleteRpcDemo_Handler,
		},
		{
			MethodName: "UpdateRpcDemo",
			Handler:    _Rpcdemo_UpdateRpcDemo_Handler,
		},
		{
			MethodName: "SelectRpcDemo",
			Handler:    _Rpcdemo_SelectRpcDemo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcdemo/rpcdemo.proto",
}
